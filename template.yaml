AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  performance-testing-tool

  Sample SAM Template for performance-testing-tool
Parameters:
  website1:
    Type: String
    # Default: '{{resolve:ssm:website1:1}}'
  website2: 
    Type: String
    # Default: '{{resolve:ssm:website2:1}}'
Resources:
  PerfTestingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/stock_trader.asl.json
      DefinitionSubstitutions:
        ScrapperFunctionArn: !GetAtt ScrapperFunction.Arn
        PerfTestingRunnerFunctionArn: !GetAtt PerfTestingRunnerFunction.Arn
      Events:
        Scheduler:
          Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
          Properties:
            Description: Schedule to run the performance testing state machine every 15 sec
            Enabled: False # This schedule is disabled by default to avoid incurring charges.
            Schedule: "rate(1 hour)"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref ScrapperFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PerfTestingRunnerFunction

  ScrapperFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/scrapper/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          WEBSITE1: !Ref website1
          WEBSITE2: !Ref website2

  PerfTestingRunnerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/perf_testing_runner/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          WEBSITE1: !Ref website1
          WEBSITE2: !Ref website2
  
  ResultsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-testing-results'

  deliverystream:
    DependsOn:
      - deliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref ResultsBucket
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '50'
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        RoleARN: !GetAtt deliveryRole.Arn
        ProcessingConfiguration:
          Enabled: 'false'

  deliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
  deliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ResultsBucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ResultsBucket
                  - '*'
      Roles:
        - !Ref deliveryRole
          

Outputs:
  # StockTradingStateMachineHourlyTradingSchedule is an implicit Schedule event rule created out of Events key under Serverless::StateMachine
  # Find out more about other implicit resources you can reference within SAM
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources.html
  PerfTestingStateMachineArn:
    Description: "Performance Testing State machine ARN"
    Value: !Ref PerfTestingStateMachine
